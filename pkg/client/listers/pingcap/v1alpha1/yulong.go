// Copyright PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/tidb-operator/pkg/apis/pingcap/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// YuLongLister helps list YuLongs.
// All objects returned here must be treated as read-only.
type YuLongLister interface {
	// List lists all YuLongs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.YuLong, err error)
	// YuLongs returns an object that can list and get YuLongs.
	YuLongs(namespace string) YuLongNamespaceLister
	YuLongListerExpansion
}

// yuLongLister implements the YuLongLister interface.
type yuLongLister struct {
	indexer cache.Indexer
}

// NewYuLongLister returns a new YuLongLister.
func NewYuLongLister(indexer cache.Indexer) YuLongLister {
	return &yuLongLister{indexer: indexer}
}

// List lists all YuLongs in the indexer.
func (s *yuLongLister) List(selector labels.Selector) (ret []*v1alpha1.YuLong, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.YuLong))
	})
	return ret, err
}

// YuLongs returns an object that can list and get YuLongs.
func (s *yuLongLister) YuLongs(namespace string) YuLongNamespaceLister {
	return yuLongNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// YuLongNamespaceLister helps list and get YuLongs.
// All objects returned here must be treated as read-only.
type YuLongNamespaceLister interface {
	// List lists all YuLongs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.YuLong, err error)
	// Get retrieves the YuLong from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.YuLong, error)
	YuLongNamespaceListerExpansion
}

// yuLongNamespaceLister implements the YuLongNamespaceLister
// interface.
type yuLongNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all YuLongs in the indexer for a given namespace.
func (s yuLongNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.YuLong, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.YuLong))
	})
	return ret, err
}

// Get retrieves the YuLong from the indexer for a given namespace and name.
func (s yuLongNamespaceLister) Get(name string) (*v1alpha1.YuLong, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("yulong"), name)
	}
	return obj.(*v1alpha1.YuLong), nil
}
